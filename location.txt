package provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class Location {
    private String zipCode;
    private String country;
    private String countryAbbreviation;
    private List<Place> places;

    Location(final String zipCode, final String country, final String countryAbbreviation, final List<Place> places) {
        this.zipCode = zipCode;
        this.country = country;
        this.countryAbbreviation = countryAbbreviation;
        this.places = places;
    }

    public static Location.LocationBuilder builder() {
        return new Location.LocationBuilder();
    }

    private Location() {
    }

    public String getZipCode() {
        return this.zipCode;
    }

    public String getCountry() {
        return this.country;
    }

    public String getCountryAbbreviation() {
        return this.countryAbbreviation;
    }

    public List<Place> getPlaces() {
        return this.places;
    }

    public void setZipCode(final String zipCode) {
        this.zipCode = zipCode;
    }

    public void setCountry(final String country) {
        this.country = country;
    }

    public void setCountryAbbreviation(final String countryAbbreviation) {
        this.countryAbbreviation = countryAbbreviation;
    }

    public void setPlaces(final List<Place> places) {
        this.places = places;
    }

    public boolean equals(final Object o) {
        if (o == this) {
            return true;
        } else if (!(o instanceof Location)) {
            return false;
        } else {
            Location other = (Location)o;
            if (!other.canEqual(this)) {
                return false;
            } else {
                label59: {
                    Object this$zipCode = this.getZipCode();
                    Object other$zipCode = other.getZipCode();
                    if (this$zipCode == null) {
                        if (other$zipCode == null) {
                            break label59;
                        }
                    } else if (this$zipCode.equals(other$zipCode)) {
                        break label59;
                    }

                    return false;
                }

                Object this$country = this.getCountry();
                Object other$country = other.getCountry();
                if (this$country == null) {
                    if (other$country != null) {
                        return false;
                    }
                } else if (!this$country.equals(other$country)) {
                    return false;
                }

                Object this$countryAbbreviation = this.getCountryAbbreviation();
                Object other$countryAbbreviation = other.getCountryAbbreviation();
                if (this$countryAbbreviation == null) {
                    if (other$countryAbbreviation != null) {
                        return false;
                    }
                } else if (!this$countryAbbreviation.equals(other$countryAbbreviation)) {
                    return false;
                }

                Object this$places = this.getPlaces();
                Object other$places = other.getPlaces();
                if (this$places == null) {
                    if (other$places != null) {
                        return false;
                    }
                } else if (!this$places.equals(other$places)) {
                    return false;
                }

                return true;
            }
        }
    }

    protected boolean canEqual(final Object other) {
        return other instanceof Location;
    }

    public int hashCode() {
        int PRIME = true;
        int result = 1;
        Object $zipCode = this.getZipCode();
        int result = result * 59 + ($zipCode == null ? 43 : $zipCode.hashCode());
        Object $country = this.getCountry();
        result = result * 59 + ($country == null ? 43 : $country.hashCode());
        Object $countryAbbreviation = this.getCountryAbbreviation();
        result = result * 59 + ($countryAbbreviation == null ? 43 : $countryAbbreviation.hashCode());
        Object $places = this.getPlaces();
        result = result * 59 + ($places == null ? 43 : $places.hashCode());
        return result;
    }

    public String toString() {
        return "Location(zipCode=" + this.getZipCode() + ", country=" + this.getCountry() + ", countryAbbreviation=" + this.getCountryAbbreviation() + ", places=" + this.getPlaces() + ")";
    }

    public static class LocationBuilder {
        private String zipCode;
        private String country;
        private String countryAbbreviation;
        private ArrayList<Place> places;

        LocationBuilder() {
        }

        public Location.LocationBuilder zipCode(final String zipCode) {
            this.zipCode = zipCode;
            return this;
        }

        public Location.LocationBuilder country(final String country) {
            this.country = country;
            return this;
        }

        public Location.LocationBuilder countryAbbreviation(final String countryAbbreviation) {
            this.countryAbbreviation = countryAbbreviation;
            return this;
        }

        public Location.LocationBuilder place(final Place place) {
            if (this.places == null) {
                this.places = new ArrayList();
            }

            this.places.add(place);
            return this;
        }

        public Location.LocationBuilder places(final Collection<? extends Place> places) {
            if (this.places == null) {
                this.places = new ArrayList();
            }

            this.places.addAll(places);
            return this;
        }

        public Location.LocationBuilder clearPlaces() {
            if (this.places != null) {
                this.places.clear();
            }

            return this;
        }

        public Location build() {
            List places;
            switch(this.places == null ? 0 : this.places.size()) {
            case 0:
                places = Collections.emptyList();
                break;
            case 1:
                places = Collections.singletonList(this.places.get(0));
                break;
            default:
                places = Collections.unmodifiableList(new ArrayList(this.places));
            }

            return new Location(this.zipCode, this.country, this.countryAbbreviation, places);
        }

        public String toString() {
            return "Location.LocationBuilder(zipCode=" + this.zipCode + ", country=" + this.country + ", countryAbbreviation=" + this.countryAbbreviation + ", places=" + this.places + ")";
        }
    }
}